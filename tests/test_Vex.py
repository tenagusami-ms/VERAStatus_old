import os
from datetime import date, datetime
import pathlib as p
from typing import List, Dict, Any, Generator

import pytest

from VERAStatus.Server import FileStat
from VERAStatus.Utility import UTC
from VERAStatus.VERAStatus import ObservationInfo
from VERAStatus.Vex import date_predicate, correct_names, extract_obs_info, \
    vex_lines2observation_info, vex_time2datetime


@pytest.fixture
def vex_contents_example1() -> Generator[List[str], None, None]:
    yield [
        'VEX_rev = 1.5B;\n',
        '* [ Generated by VEX-SHIFT ] template = r21010a.vex',
        '     ref $EXPER = r20290a;\n',
        '     ref $PROCEDURES = STD_2BEAM;\n',
        '*\n',
        '$EXPER;\n',
        '     target_correlator = VERA;\n',
        '     exper_name = r20290a;\n',
        '     exper_description = OH26.2-0 and IRC+2040;\n',
        '     exper_nominal_start = 2020y290d04h45m00s;\n',
        '     exper_nominal_stop  = 2020y290d13h05m00s;\n',
        '     PI_name = Nakagawa ;\n',
        '     contact_name = Nakagawa ;\n',
        '     contact_email = nakagawa@sci.kagoshima-u.ac.jp ;\n',
        '     scheduler_name = Atsushi Morita;\n',
        '     scheduler_email = k1391832@kadai.jp;\n',
        '     ref $IF = IF_Q:Vm:Vr:Vo:Vs;\n',
    ]


@pytest.fixture
def vex_contents_example2() -> Generator[List[str], None, None]:
    yield [
        'VEX_rev = 1.5B;\n',
        '* [ Generated by VEX-SHIFT ] template = r21010a.vex',
        '     ref $EXPER = r20290a;\n',
        '     ref $PROCEDURES = STD_2BEAM;\n',
        '*\n',
        '$EXPER;\n',
        '     target_correlator = VERA;\n',
        '     exper_name = r20290a;\n',
        '     exper_description = OH26.2-0 and IRC+2040;\n',
        '     exper_nominal_start = 2020y290d04h45m00s;\n',
        '     exper_nominal_stop  = 2020y290d13h05m00s;\n',
        '     contact_name = Nakagawa ;\n',
        '     contact_email = nakagawa@sci.kagoshima-u.ac.jp ;\n',
        '     scheduler_name = Atsushi Morita;\n',
        '     scheduler_email = k1391832@kadai.jp;\n',
        '     ref $IF = IF_C67:Vm:Vr:Vo:Vs;\n',
    ]


@pytest.fixture
def vex_dict_example1() -> Generator[Dict[str, Any], None, None]:
    yield {
        'exper_name': 'r20290a',
        'exper_description': 'OH26.2-0 and IRC+2040',
        'exper_nominal_start': '2020y290d04h45m00s',
        'exper_nominal_stop': '2020y290d13h05m00s',
        'PI_name': 'Nakagawa',
        'contact_name': 'Nakagawa',
        'ref $IF': 'IF_Q:Vm:Vr:Vo:Vs',
    }


@pytest.fixture
def vex_dict_example2() -> Generator[Dict[str, Any], None, None]:
    yield {
        'exper_name': 'r20290a',
        'exper_description': 'OH26.2-0 and IRC+2040',
        'exper_nominal_start': '2020y290d04h45m00s',
        'exper_nominal_stop': '2020y290d13h05m00s',
        'contact_name': 'Nakagawa',
        'ref $IF': 'IF_C67:Vm:Vr:Vo:Vs',
    }


@pytest.mark.parametrize('observation_id, start_date, end_date, expected', [
    (p.PurePath("r20300a.vex"), [2020, 10, 26], [2020, 10, 27], True),
    (p.PurePath("./r20300ab.vex"), [2020, 10, 25], [2020, 10, 27], True),
    (p.PurePath("f20300a.vex"), [2020, 10, 25], [2020, 10, 26], False),
    (p.PurePath("fd20300a.vex"), [2020, 10, 25], [2020, 10, 26], False),
])
def test_date_predicate(observation_id: p.PurePath, start_date: List[int],
                        end_date: List[int], expected: bool):
    assert date_predicate(observation_id, date(*start_date), date(*end_date)) == expected


def test_correct_names():
    names1: Dict[str, Any] = {"PI_name": "pi1", "contact_name": None}
    correct_names(names1)
    assert names1 == {"PI_name": "pi1", "contact_name": "pi1"}
    names2: Dict[str, Any] = {"PI_name": None, "contact_name": "pi2"}
    correct_names(names2)
    assert names2 == {"PI_name": "pi2", "contact_name": "pi2"}
    names3: Dict[str, Any] = {"PI_name": None, "contact_name": None}
    correct_names(names3)
    assert names3 == {"PI_name": "unknown", "contact_name": "unknown"}


def test_extract_obs_info(vex_contents_example1, vex_contents_example2,
                          vex_dict_example1, vex_dict_example2):
    assert extract_obs_info(vex_contents_example1) == vex_dict_example1
    assert extract_obs_info(vex_contents_example2) == vex_dict_example2


def test_vex_lines2observation_info(vex_dict_example1, vex_dict_example2):
    file_stat = os.stat(__file__)
    status = FileStat.from_stat(file_stat)
    vex_dict_example1["timestamp"] = datetime.fromtimestamp(file_stat.st_mtime, tz=UTC)
    assert vex_lines2observation_info(vex_dict_example1, status) == \
           ObservationInfo("r20290a", "OH26.2-0 and IRC+2040", datetime(2020, 10, 16, 4, 45, 0, tzinfo=UTC),
                           datetime(2020, 10, 16, 13, 5, 0, tzinfo=UTC), "Nakagawa", "Nakagawa", "Q",
                           datetime.fromtimestamp(file_stat.st_mtime, tz=UTC))
    vex_dict_example2["timestamp"] = datetime.fromtimestamp(file_stat.st_mtime, tz=UTC)
    assert vex_lines2observation_info(vex_dict_example2, status) == \
           ObservationInfo("r20290a", "OH26.2-0 and IRC+2040", datetime(2020, 10, 16, 4, 45, 0, tzinfo=UTC),
                           datetime(2020, 10, 16, 13, 5, 0, tzinfo=UTC), "Nakagawa", "Nakagawa", "C67",
                           datetime.fromtimestamp(file_stat.st_mtime, tz=UTC))


def test_vex_time2datetime():
    assert vex_time2datetime("2020y300d01h23m45s") == \
           datetime(2020, 10, 26, 1, 23, 45, tzinfo=UTC)
